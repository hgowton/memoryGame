{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/ScoreCard/index.js","App.js","index.js"],"names":["FriendCard","props","className","onClick","updateFriend","id","alt","name","src","image","Wrapper","children","ScoreCard","score","topScore","App","state","count","friends","villian","card","handleIncrement","setState","handleScoreIncrement","handleTopScoreIncrement","changeDeck","resetGame","correct","savedFriends","map","element","newElt","console","log","clicked","sort","a","b","Math","random","resetData","item","this","friend","key","Component","ReactDOM","render","document","getElementById"],"mappings":"+iJAoBeA,MAjBf,SAAoBC,GAChB,OACI,yBAAKC,UAAU,cAAcC,QAAS,WACrCF,EAAMG,aAAaH,EAAMI,MAItB,yBAAKH,UAAU,iBACX,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,SAErC,yBAAKP,UAAU,WACX,4BAAKD,EAAMM,S,MCPZG,MAJf,SAAiBT,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMU,W,MCY1BC,MAZf,SAAmBX,GACjB,OACA,yBAAKC,UAAU,uBACb,yBAAKA,UAAU,OAAf,UACYD,EAAMY,OAEhB,yBAAKX,UAAU,OAAf,eACeD,EAAMa,Y,cC+GZC,G,kNAjHbC,MAAM,CACJC,MAAO,EACPJ,MAAO,EACPK,QAASC,EACTL,SAAU,EACVM,KAAM,I,EAGRC,gBAAkB,WAChB,EAAKC,SAAS,CAACL,MAAO,EAAKD,MAAMC,MAAQ,K,EAG3CM,qBAAuB,WACrB,EAAKD,SAAS,CAACT,MAAO,EAAKG,MAAMH,MAAQ,M,EAG3CW,wBAA0B,WACpB,EAAKR,MAAMH,OAAS,EAAKG,MAAMF,UACjC,EAAKQ,SAAS,CAACR,SAAU,EAAKE,MAAMH,MAAQ,M,EAKhDY,WAAa,WACX,EAAKC,YACF,EAAKV,MAAME,SAAWA,EACvB,EAAKI,SAAS,CAAEJ,QAASC,IAEzB,EAAKG,SAAS,CAAEJ,QAASA,K,EAK7Bd,aAAe,SAAAC,GACb,IAAIsB,GAAU,EAEVC,EAAe,EAAKZ,MAAME,QAAQW,KAAK,SAAAC,GAGzC,IAAIC,EAAM,eAAOD,GAUjB,OATGC,EAAO1B,KAAOA,IACf2B,QAAQC,IAAIF,EAAOxB,MAChBwB,EAAOG,QACRF,QAAQC,IAAI,mBAAqBF,EAAOG,UAExCP,GAAU,EACVI,EAAOG,SAAU,IAGdH,KAET,IAAIJ,EAKF,OAAO,EAAKD,YAJZ,EAAKL,kBACL,EAAKE,uBACL,EAAKC,0BAIPI,EAAaO,MAAK,SAACC,EAAEC,GAAH,OAASC,KAAKC,SAAW,MAC3C,EAAKjB,SAAS,CAACJ,QAASU,K,EAG1BF,UAAY,WAGV,IAAMc,EAAY,EAAKxB,MAAME,QAAQW,KAAI,SAAAY,GAAI,kCAAUA,GAAV,IAAgBP,SAAS,OACtE,EAAKZ,SAAS,CAAEL,MAAO,EAAGJ,MAAO,EAAGK,QAASsB,K,uDAIrC,IAAD,OACP,OACE,6BAEE,4BAAQtC,UAAU,cAChB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YAEf,yBAAKM,IAAI,0BAET,yBAAKN,UAAU,YACf,kBAAC,EAAD,CACEe,MAAOyB,KAAK1B,MAAMC,MAClBJ,MAAO6B,KAAK1B,MAAMH,MAClBC,SAAU4B,KAAK1B,MAAMF,WACrB,4BAAQX,QAASuC,KAAKjB,YAAtB,mBAKR,kBAAC,EAAD,KAGCiB,KAAK1B,MAAME,QAAQW,KAAI,SAAAc,GAAM,OAC5B,kBAAC,EAAD,CACAvC,aAAc,EAAKA,aACnBiB,gBAAiB,EAAKA,gBACtBE,qBAAsB,EAAKA,qBAC3BC,wBAAyB,EAAKA,wBAC9BnB,GAAIsC,EAAOtC,GACXuC,IAAKD,EAAOtC,GACZE,KAAMoC,EAAOpC,KACbE,MAAOkC,EAAOlC,iB,GAxGNoC,c,MCHlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.bb402d7d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\"\n\nfunction FriendCard(props) {\n    return(\n        <div className=\"card select\" onClick={() => \n        {props.updateFriend(props.id);\n        ;\n        }}>\n\n            <div className=\"img-container\" >\n                <img alt={props.name} src={props.image} />\n            </div>\n            <div className=\"content\">\n                <h4>{props.name}</h4>\n            </div>\n        </div>\n    );\n}\n\nexport default FriendCard;","import React from \"react\";\nimport \"./style.css\"\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\"\n\n\nfunction ScoreCard(props) {\n  return (\n  <div className=\"container scoreCard\">\n    <div className=\"row\">\n        Score: {props.score}\n      </div>\n      <div className=\"row\">\n        High Score: {props.topScore}\n    </div>\n  </div>)\n}\n\nexport default ScoreCard;","import React, {Component} from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport ScoreCard from \"./components/ScoreCard\";\nimport friends from \"./friends.json\";\nimport villian from \"./villian.json\";\nimport './App.css'\n\nclass App extends Component {\n  state={\n    count: 0,\n    score: 0,\n    friends: villian,\n    topScore: 0,\n    card: ''\n  };\n\n  handleIncrement = () => {\n    this.setState({count: this.state.count + 1});\n  }\n\n  handleScoreIncrement = () => {\n    this.setState({score: this.state.score + 10})\n  }\n\n  handleTopScoreIncrement = () => {\n    if (this.state.score >= this.state.topScore) {\n      this.setState({topScore: this.state.score + 10})\n    }\n  }\n  \n  \n  changeDeck = () => {\n    this.resetGame();\n    if(this.state.friends == friends) {\n      this.setState({ friends: villian })\n    } else {\n      this.setState({ friends: friends })\n    }\n  }\n\n  //sorts cards on page\n  updateFriend = id => {\n    let correct = false;\n\n    let savedFriends = this.state.friends.map( element => {\n      // if the ID has already been clicked, then restart the game\n\n      let newElt = {...element}\n      if(newElt.id === id) {\n        console.log(newElt.name)\n        if(newElt.clicked) {\n          console.log(\"already clicked \" + newElt.clicked)\n        } else {\n          correct = true;\n          newElt.clicked = true\n        }\n      }\n      return newElt\n    })\n    if (correct) {\n      this.handleIncrement();\n      this.handleScoreIncrement();\n      this.handleTopScoreIncrement();\n    } else {\n      return this.resetGame();\n    }\n    savedFriends.sort((a,b) => Math.random() - 0.5);\n    this.setState({friends: savedFriends});\n  };\n  \n  resetGame = () => {\n    //resets friends array to json (fixes all true to false)\n    // alert(\"Oops, you've already selected that character!\")\n    const resetData = this.state.friends.map(item => ({ ...item, clicked: false }));\n    this.setState({ count: 0, score: 0, friends: resetData })\n  }\n\n  //Map over this.state.friends and rend a FriendCard component for each friend object\n  render() {\n    return(\n      <div>\n\n        <header className=\"App-header\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-4-md\">\n              {/* <img src={process.env.PUBLIC_URL + './img/MarvelLogo.png'} /> */}\n              <img src='./img/MarvelLogo.png' />\n              </div>\n              <div className=\"col-8-md\">\n              <ScoreCard \n                count={this.state.count} \n                score={this.state.score} \n                topScore={this.state.topScore}/>\n                <button onClick={this.changeDeck}>Change Deck</button>\n              </div>\n            </div>\n          </div>\n        </header>\n        <Wrapper>\n          {/* {this.state.score > 20 && <h1> Contrats</h1>} */}\n   \n        {this.state.friends.map(friend => (\n          <FriendCard\n          updateFriend={this.updateFriend}\n          handleIncrement={this.handleIncrement}\n          handleScoreIncrement={this.handleScoreIncrement}\n          handleTopScoreIncrement={this.handleTopScoreIncrement}\n          id={friend.id}\n          key={friend.id}\n          name={friend.name}\n          image={friend.image}\n          />\n        ))}\n      </Wrapper>\n      </div>\n\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}